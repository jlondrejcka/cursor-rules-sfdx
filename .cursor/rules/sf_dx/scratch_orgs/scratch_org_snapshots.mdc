---
description: Understanding Scratch Org Snapshots and their benefits
globs: 
alwaysApply: false
---
 ---
description: Understanding Scratch Org Snapshots and their benefits
globs: 
alwaysApply: false
---
# Scratch Org Snapshots

## Overview
Scratch Org Snapshots allow you to capture the state of a Scratch Org, including its metadata, configuration, and settings. Snapshots enable you to recreate that exact state in a new Scratch Org, enhancing consistency and accelerating development cycles.

## Key Concepts
- Snapshots capture the metadata and configuration of a Scratch Org
- Snapshots can be saved and reused to create new Scratch Orgs
- Snapshots help maintain consistency across development environments
- Snapshots accelerate development by reducing setup time
- Snapshots can be used for package version creation

## Benefits of Using Snapshots

### Development Efficiency
- Reduce setup time for new Scratch Orgs
- Avoid repeating the same deployment and configuration steps
- Capture complex org configurations that would be time-consuming to recreate

### Testing Consistency
- Ensure all team members test against the same configuration
- Create consistent testing environments for CI/CD processes
- Reproduce bug environments exactly for easier troubleshooting

### Release Management
- Capture pre-release states for reference
- Create package versions from consistent environments
- Maintain snapshots for different stages of the development cycle

## Snapshot vs. Other Features

### Snapshot vs. Source Control
- Snapshots include org configuration not captured in source code
- Snapshots reflect the deployed and activated state, not just the code
- Snapshots capture the entire org state, not just tracked components

### Snapshot vs. Org Shape
- Org Shape captures settings and features from any org
- Snapshots capture specific metadata configurations from a Scratch Org
- Snapshots are more comprehensive for Scratch Org state

### Snapshot vs. Templates
- Snapshots are more dynamic and include actual deployed configurations
- Templates typically include only the definition but not the resulting state
- Snapshots can capture changes made through the UI, not just deployed code

## Snapshot Lifecycle

### 1. Create a Scratch Org
Start with a Scratch Org created using your definition file.

### 2. Set Up and Configure
Deploy source, make configuration changes, and set up the org as needed.

### 3. Create Snapshot
Capture the Scratch Org state as a snapshot.

### 4. Create New Scratch Orgs from Snapshot
Use the snapshot to create new Scratch Orgs with identical configuration.

### 5. Maintain and Update Snapshots
Create new snapshots as your configuration evolves.

## Best Practices
1. Create snapshots at key milestones in development
2. Name snapshots clearly to indicate their purpose and content
3. Document what each snapshot contains and when to use it
4. Clean up old snapshots that are no longer needed
5. Use snapshots in CI/CD pipelines to ensure consistent testing environments
6. Consider creating snapshots for different feature sets or configurations

## Further Reading
[Salesforce DX Developer Guide: Scratch Org Snapshots](mdc:https:/developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_snapshots.htm)